{"version":3,"sources":["/Users/liuyang/projects/ringtone_new/node_modules/tinymce/plugins/anchor/index.js","/Users/liuyang/projects/ringtone_new/node_modules/tinymce/plugins/anchor/plugin.js"],"names":["global","tinymce","util","Tools","resolve","global$1","global$2","namedAnchorSelector","isEmptyString","str","getIdFromAnchor","elm","getAttribute","isNamedAnchor","nodeName","toLowerCase","isAnchor","getNamedAnchor","editor","dom","getParent","selection","getStart","insert","id","anchor","anchorElement","removeAttribute","addVisual","undoManager","add","updateAnchor","transact","getParam","allowHtmlInNamedAnchor","collapse","isCollapsed","insertContent","createHTML","walk","getRng","nodes","each","node","firstChild","remove","removeEmptyNamedAnchorsInSelection","formatter","apply","value","createAnchor","focus","isEmptyNamedAnchorNode","attr","isNamedAnchorNode","setContentEditable","state","i","length","on","parser","addNodeFilter","serializer","setup","addCommand","currentId","getId","windowManager","open","title","size","body","type","items","name","label","placeholder","buttons","text","primary","initialData","onSubmit","api","newId","test","alert","insertAnchor","getData","close","register","ui","registry","addToggleButton","icon","tooltip","onAction","execCommand","onSetup","buttonApi","selectorChangedWithUnbind","setActive","unbind","addMenuItem","register$1","inline","selector","split","deep","attributes","onmatch","_fmt","_itemName","registerFormats"],"mappings":"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","file":"929.dc17aab5.chunk.js","sourcesContent":["// Exports the \"anchor\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/anchor')\n//   ES2015:\n//     import 'tinymce/plugins/anchor'\nrequire('./plugin.js');","/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.8.1 (2021-05-20)\n */\n(function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.RangeUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var allowHtmlInNamedAnchor = function (editor) {\n      return editor.getParam('allow_html_in_named_anchor', false, 'boolean');\n    };\n\n    var namedAnchorSelector = 'a:not([href])';\n    var isEmptyString = function (str) {\n      return !str;\n    };\n    var getIdFromAnchor = function (elm) {\n      var id = elm.getAttribute('id') || elm.getAttribute('name');\n      return id || '';\n    };\n    var isAnchor = function (elm) {\n      return elm && elm.nodeName.toLowerCase() === 'a';\n    };\n    var isNamedAnchor = function (elm) {\n      return isAnchor(elm) && !elm.getAttribute('href') && getIdFromAnchor(elm) !== '';\n    };\n    var isEmptyNamedAnchor = function (elm) {\n      return isNamedAnchor(elm) && !elm.firstChild;\n    };\n\n    var removeEmptyNamedAnchorsInSelection = function (editor) {\n      var dom = editor.dom;\n      global$1(dom).walk(editor.selection.getRng(), function (nodes) {\n        global$2.each(nodes, function (node) {\n          if (isEmptyNamedAnchor(node)) {\n            dom.remove(node, false);\n          }\n        });\n      });\n    };\n    var isValidId = function (id) {\n      return /^[A-Za-z][A-Za-z0-9\\-:._]*$/.test(id);\n    };\n    var getNamedAnchor = function (editor) {\n      return editor.dom.getParent(editor.selection.getStart(), namedAnchorSelector);\n    };\n    var getId = function (editor) {\n      var anchor = getNamedAnchor(editor);\n      if (anchor) {\n        return getIdFromAnchor(anchor);\n      } else {\n        return '';\n      }\n    };\n    var createAnchor = function (editor, id) {\n      editor.undoManager.transact(function () {\n        if (!allowHtmlInNamedAnchor(editor)) {\n          editor.selection.collapse(true);\n        }\n        if (editor.selection.isCollapsed()) {\n          editor.insertContent(editor.dom.createHTML('a', { id: id }));\n        } else {\n          removeEmptyNamedAnchorsInSelection(editor);\n          editor.formatter.remove('namedAnchor', null, null, true);\n          editor.formatter.apply('namedAnchor', { value: id });\n          editor.addVisual();\n        }\n      });\n    };\n    var updateAnchor = function (editor, id, anchorElement) {\n      anchorElement.removeAttribute('name');\n      anchorElement.id = id;\n      editor.addVisual();\n      editor.undoManager.add();\n    };\n    var insert = function (editor, id) {\n      var anchor = getNamedAnchor(editor);\n      if (anchor) {\n        updateAnchor(editor, id, anchor);\n      } else {\n        createAnchor(editor, id);\n      }\n      editor.focus();\n    };\n\n    var insertAnchor = function (editor, newId) {\n      if (!isValidId(newId)) {\n        editor.windowManager.alert('Id should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.');\n        return false;\n      } else {\n        insert(editor, newId);\n        return true;\n      }\n    };\n    var open = function (editor) {\n      var currentId = getId(editor);\n      editor.windowManager.open({\n        title: 'Anchor',\n        size: 'normal',\n        body: {\n          type: 'panel',\n          items: [{\n              name: 'id',\n              type: 'input',\n              label: 'ID',\n              placeholder: 'example'\n            }]\n        },\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: { id: currentId },\n        onSubmit: function (api) {\n          if (insertAnchor(editor, api.getData().id)) {\n            api.close();\n          }\n        }\n      });\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceAnchor', function () {\n        open(editor);\n      });\n    };\n\n    var isNamedAnchorNode = function (node) {\n      return node && isEmptyString(node.attr('href')) && !isEmptyString(node.attr('id') || node.attr('name'));\n    };\n    var isEmptyNamedAnchorNode = function (node) {\n      return isNamedAnchorNode(node) && !node.firstChild;\n    };\n    var setContentEditable = function (state) {\n      return function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          if (isEmptyNamedAnchorNode(node)) {\n            node.attr('contenteditable', state);\n          }\n        }\n      };\n    };\n    var setup = function (editor) {\n      editor.on('PreInit', function () {\n        editor.parser.addNodeFilter('a', setContentEditable('false'));\n        editor.serializer.addNodeFilter('a', setContentEditable(null));\n      });\n    };\n\n    var registerFormats = function (editor) {\n      editor.formatter.register('namedAnchor', {\n        inline: 'a',\n        selector: namedAnchorSelector,\n        remove: 'all',\n        split: true,\n        deep: true,\n        attributes: { id: '%value' },\n        onmatch: function (node, _fmt, _itemName) {\n          return isNamedAnchor(node);\n        }\n      });\n    };\n\n    var register$1 = function (editor) {\n      editor.ui.registry.addToggleButton('anchor', {\n        icon: 'bookmark',\n        tooltip: 'Anchor',\n        onAction: function () {\n          return editor.execCommand('mceAnchor');\n        },\n        onSetup: function (buttonApi) {\n          return editor.selection.selectorChangedWithUnbind('a:not([href])', buttonApi.setActive).unbind;\n        }\n      });\n      editor.ui.registry.addMenuItem('anchor', {\n        icon: 'bookmark',\n        text: 'Anchor...',\n        onAction: function () {\n          return editor.execCommand('mceAnchor');\n        }\n      });\n    };\n\n    function Plugin () {\n      global.add('anchor', function (editor) {\n        setup(editor);\n        register(editor);\n        register$1(editor);\n        editor.on('PreInit', function () {\n          registerFormats(editor);\n        });\n      });\n    }\n\n    Plugin();\n\n}());\n"],"sourceRoot":""}