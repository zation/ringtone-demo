{"version":3,"sources":["/Users/liuyang/projects/ringtone_new/node_modules/tinymce/plugins/nonbreaking/index.js","/Users/liuyang/projects/ringtone_new/node_modules/tinymce/plugins/nonbreaking/plugin.js"],"names":["global","tinymce","util","Tools","resolve","stringRepeat","string","repeats","str","index","insertNbsp","editor","times","html","getParam","wrapNbsps","plugins","visualchars","isEnabled","isVisualCharsEnabled","undoManager","transact","insertContent","global$1","add","addCommand","register","ui","registry","addButton","icon","tooltip","onAction","execCommand","addMenuItem","text","register$1","spaces","getKeyboardSpaces","on","e","keyCode","TAB","isDefaultPrevented","shiftKey","preventDefault","stopImmediatePropagation","setup"],"mappings":"uFAMA,EAAQ,Q,YCEP,WACG,aAEA,IAAIA,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAcpCC,EAAe,SAAUC,EAAQC,GAEnC,IADA,IAAIC,EAAM,GACDC,EAAQ,EAAGA,EAAQF,EAASE,IACnCD,GAAOF,EAET,OAAOE,GAKLE,EAAa,SAAUC,EAAQC,GACjC,IAOIC,EAtBU,SAAUF,GACxB,OAAOA,EAAOG,SAAS,oBAAoB,EAAM,WAoBhCC,CAAUJ,IACFA,EAAOK,QAAQC,YAH/B,iBARgB,SAAUN,GACnC,QAAOA,EAAOK,QAAQC,aAAcN,EAAOK,QAAQC,YAAYC,YAItDC,CAAqBR,GAAU,yBAA2B,iBAG5B,6BAA+BN,EAAa,SAAUO,GAAS,UAGnCP,EAAa,SAAUO,GAC1FD,EAAOS,YAAYC,UAAS,WAC1B,OAAOV,EAAOW,cAAcT,OAU5BU,EAAWtB,QAAQC,KAAKC,MAAMC,QAAQ,mBAoCxCJ,EAAOwB,IAAI,eAAe,SAAUb,IA1CvB,SAAUA,GACvBA,EAAOc,WAAW,kBAAkB,WAClCf,EAAWC,EAAQ,MAyCnBe,CAASf,GAnBI,SAAUA,GACzBA,EAAOgB,GAAGC,SAASC,UAAU,cAAe,CAC1CC,KAAM,eACNC,QAAS,oBACTC,SAAU,WACR,OAAOrB,EAAOsB,YAAY,qBAG9BtB,EAAOgB,GAAGC,SAASM,YAAY,cAAe,CAC5CJ,KAAM,eACNK,KAAM,oBACNH,SAAU,WACR,OAAOrB,EAAOsB,YAAY,qBAQ5BG,CAAWzB,GApCH,SAAUA,GACpB,IAAI0B,EA7CkB,SAAU1B,GAChC,IAAI0B,EAAS1B,EAAOG,SAAS,wBAAyB,GACtD,MAAsB,kBAAXuB,GACS,IAAXA,EAAkB,EAAI,EAEtBA,EAwCIC,CAAkB3B,GAC3B0B,EAAS,GACX1B,EAAO4B,GAAG,WAAW,SAAUC,GAC7B,GAAIA,EAAEC,UAAYlB,EAASmB,MAAQF,EAAEG,qBAAsB,CACzD,GAAIH,EAAEI,SACJ,OAEFJ,EAAEK,iBACFL,EAAEM,2BACFpC,EAAWC,EAAQ0B,OA2BvBU,CAAMpC,MAtFd","file":"528.fd4db122.chunk.js","sourcesContent":["// Exports the \"nonbreaking\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/nonbreaking')\n//   ES2015:\n//     import 'tinymce/plugins/nonbreaking'\nrequire('./plugin.js');","/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.8.1 (2021-05-20)\n */\n(function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var getKeyboardSpaces = function (editor) {\n      var spaces = editor.getParam('nonbreaking_force_tab', 0);\n      if (typeof spaces === 'boolean') {\n        return spaces === true ? 3 : 0;\n      } else {\n        return spaces;\n      }\n    };\n    var wrapNbsps = function (editor) {\n      return editor.getParam('nonbreaking_wrap', true, 'boolean');\n    };\n\n    var stringRepeat = function (string, repeats) {\n      var str = '';\n      for (var index = 0; index < repeats; index++) {\n        str += string;\n      }\n      return str;\n    };\n    var isVisualCharsEnabled = function (editor) {\n      return editor.plugins.visualchars ? editor.plugins.visualchars.isEnabled() : false;\n    };\n    var insertNbsp = function (editor, times) {\n      var classes = function () {\n        return isVisualCharsEnabled(editor) ? 'mce-nbsp-wrap mce-nbsp' : 'mce-nbsp-wrap';\n      };\n      var nbspSpan = function () {\n        return '<span class=\"' + classes() + '\" contenteditable=\"false\">' + stringRepeat('&nbsp;', times) + '</span>';\n      };\n      var shouldWrap = wrapNbsps(editor);\n      var html = shouldWrap || editor.plugins.visualchars ? nbspSpan() : stringRepeat('&nbsp;', times);\n      editor.undoManager.transact(function () {\n        return editor.insertContent(html);\n      });\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceNonBreaking', function () {\n        insertNbsp(editor, 1);\n      });\n    };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var setup = function (editor) {\n      var spaces = getKeyboardSpaces(editor);\n      if (spaces > 0) {\n        editor.on('keydown', function (e) {\n          if (e.keyCode === global$1.TAB && !e.isDefaultPrevented()) {\n            if (e.shiftKey) {\n              return;\n            }\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            insertNbsp(editor, spaces);\n          }\n        });\n      }\n    };\n\n    var register$1 = function (editor) {\n      editor.ui.registry.addButton('nonbreaking', {\n        icon: 'non-breaking',\n        tooltip: 'Nonbreaking space',\n        onAction: function () {\n          return editor.execCommand('mceNonBreaking');\n        }\n      });\n      editor.ui.registry.addMenuItem('nonbreaking', {\n        icon: 'non-breaking',\n        text: 'Nonbreaking space',\n        onAction: function () {\n          return editor.execCommand('mceNonBreaking');\n        }\n      });\n    };\n\n    function Plugin () {\n      global.add('nonbreaking', function (editor) {\n        register(editor);\n        register$1(editor);\n        setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"],"sourceRoot":""}